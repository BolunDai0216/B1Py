"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

from io import BytesIO
import struct

class IMUState(object):
    __slots__ = ["accel", "gyro", "temparature", "q", "rpy", "gravity"]

    __typenames__ = ["float", "float", "float", "float", "float", "float"]

    __dimensions__ = [[3], [3], None, [4], [3], None]

    def __init__(self):
        self.accel = [ 0.0 for dim0 in range(3) ]
        self.gyro = [ 0.0 for dim0 in range(3) ]
        self.temparature = 0.0
        self.q = [ 0.0 for dim0 in range(4) ]
        self.rpy = [ 0.0 for dim0 in range(3) ]
        self.gravity = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(IMUState._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack('>3f', *self.accel[:3]))
        buf.write(struct.pack('>3f', *self.gyro[:3]))
        buf.write(struct.pack(">f", self.temparature))
        buf.write(struct.pack('>4f', *self.q[:4]))
        buf.write(struct.pack('>3f', *self.rpy[:3]))
        buf.write(struct.pack(">f", self.gravity))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != IMUState._get_packed_fingerprint():
            raise ValueError("Decode error")
        return IMUState._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = IMUState()
        self.accel = struct.unpack('>3f', buf.read(12))
        self.gyro = struct.unpack('>3f', buf.read(12))
        self.temparature = struct.unpack(">f", buf.read(4))[0]
        self.q = struct.unpack('>4f', buf.read(16))
        self.rpy = struct.unpack('>3f', buf.read(12))
        self.gravity = struct.unpack(">f", buf.read(4))[0]
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if IMUState in parents: return 0
        tmphash = (0xc9351adf451efd7e) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if IMUState._packed_fingerprint is None:
            IMUState._packed_fingerprint = struct.pack(">Q", IMUState._get_hash_recursive([]))
        return IMUState._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", IMUState._get_packed_fingerprint())[0]

